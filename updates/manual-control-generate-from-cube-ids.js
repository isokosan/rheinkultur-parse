// const controlId = 'Vb0hoGMTcU'
const controlId = 'Nc8qFo5Tcz'
const cubeIds = ['TLK-41314A5', 'TLK-41314A52', 'TLK-55312A89', 'TLK-55312A8', 'TLK-55312A76', 'TLK-55312A75', 'TLK-55312A61', 'TLK-55312A6', 'TLK-55312A578', 'TLK-55312A541', 'TLK-55312A518', 'TLK-55312A510', 'TLK-55312A506', 'TLK-55312A504', 'TLK-55312A502', 'TLK-55312A47', 'TLK-55312A44', 'TLK-55312A43', 'TLK-55312A42', 'TLK-55312A34', 'TLK-55312A24', 'TLK-55312A12', 'TLK-55312A11', 'TLK-4911A98', 'TLK-4911A97', 'TLK-4911A88', 'TLK-4911A83', 'TLK-4911A81', 'TLK-4911A70', 'TLK-4911A4', 'TLK-4911A23', 'TLK-4911A11', 'TLK-47313A17', 'TLK-47313A1', 'TLK-47312Ãœ1', 'TLK-47312A67', 'TLK-47312A63', 'TLK-47312A54', 'TLK-47312A52', 'TLK-47312A31', 'TLK-47312A3', 'TLK-47312A28', 'TLK-47312A26', 'TLK-47312A25', 'TLK-47312A11', 'TLK-42821A8', 'TLK-42821A7', 'TLK-42821A31', 'TLK-42821A28', 'TLK-42821A27', 'TLK-42821A24', 'TLK-42821A18', 'TLK-42821A17', 'TLK-42821A16', 'TLK-42821A14', 'TLK-42821A13', 'TLK-42821A11', 'TLK-52812A4', 'TLK-52812A38', 'TLK-52812A32', 'TLK-52812A16', 'TLK-52812A13', 'TLK-52812A72', 'TLK-52812A11', 'TLK-52812A12', 'TLK-53150A41', 'TLK-53150A642', 'TLK-53180A42', 'TLK-44161A627', 'TLK-4131432', 'TLK-41314A71', 'TLK-41314A2', 'TLK-41314A75', 'TLK-51173A145', 'TLK-51186A31', 'TLK-51186A70', 'TLK-53132A527', 'TLK-51531A11', 'TLK-51711A23', 'TLK-51711A28', 'TLK-51711A24', 'TLK-51711A525', 'TLK-51711A48', 'TLK-51711A521', 'TLK-51711A14', 'TLK-51711A19', 'TLK-51711A10', 'TLK-51711A16', 'TLK-51711A11', 'TLK-511828231', 'TLK-511828208A', 'TLK-511828235', 'TLK-511828243', 'TLK-511828262', 'TLK-511828266', 'TLK-51186A55', 'TLK-51161A28', 'TLK-51161A11', 'TLK-51161A13', 'TLK-51161A6', 'TLK-51361A66', 'TLK-51361A545', 'TLK-51372A561', 'TLK-49501A1', 'TLK-51173A17', 'TLK-51173A147', 'TLK-51173A88', 'TLK-51173R135', 'TLK-51173R158', 'TLK-51173R176', 'TLK-51178A35', 'TLK-51178A46', 'TLK-51178A56', 'TLK-51178A75', 'TLK-44251A9', 'TLK-44251A603', 'TLK-44251A3', 'TLK-44511A91', 'TLK-44511A99', 'TLK-44811A27', 'TLK-44811A26', 'TLK-44811A11', 'TLK-44811A14', 'TLK-44811A16', 'TLK-44811A18', 'TLK-44131A27', 'TLK-44131A23', 'TLK-44131A29', 'TLK-44131A658', 'TLK-44131A605', 'TLK-44131A646', 'TLK-44161A47', 'TLK-44161A55', 'TLK-44161A58', 'TLK-44161A12', 'TLK-44161A26', 'TLK-44081A3', 'TLK-42811A11', 'TLK-42811A12', 'TLK-42811A13', 'TLK-42811A15', 'TLK-42811A40', 'TLK-42811A31', 'TLK-42811A32', 'TLK-42811A45', 'TLK-42811A4', 'TLK-42811A30', 'TLK-42811A24', 'TLK-42811A37', 'TLK-42811A42', 'TLK-42811A6', 'TLK-42091A14', 'TLK-42091A13', 'TLK-42091A28', 'TLK-42091A15', 'TLK-42091A8', 'TLK-42211A16', 'TLK-42211A22', 'TLK-42211A37', 'TLK-42211A45', 'TLK-42214A11', 'TLK-42214A44', 'TLK-42215A32', 'TLK-42215A5', 'TLK-42215A8', 'TLK-42215A64', 'TLK-42215A10', 'TLK-42215A17', 'TLK-42215A18', 'TLK-42215A26', 'TLK-42215A25', 'TLK-42215A27', 'TLK-42216A91', 'TLK-41658A22', 'TLK-41658A6', 'TLK-41711A36', 'TLK-41711R36', 'TLK-41616A17', 'TLK-41612A6', 'TLK-41612A9', 'TLK-41616A2', 'TLK-41616A11', 'TLK-41616A516', 'TLK-41612A28', 'TLK-41612A3', 'TLK-41612A26', 'TLK-41612A23', 'TLK-503113127', 'TLK-503113140', 'TLK-503113143', 'TLK-50337A4', 'TLK-504111122', 'TLK-50431A1', 'TLK-50431A4', 'TLK-41821A15', 'TLK-41821A48', 'TLK-41821A53', 'TLK-40768A11', 'TLK-40768A19', 'TLK-41053A514', 'TLK-40700V1010', 'TLK-40700A27', 'TLK-40700A3', 'TLK-40700A614', 'TLK-40700A630', 'TLK-51711A582', 'TLK-51711A64', 'TLK-51711A569', 'TLK-51711R31', 'TLK-51711R47', 'TLK-51711V1400', 'TLK-51715A15', 'TLK-51715A21', 'TLK-51831A4', 'TLK-51831A1', 'TLK-51831A9', 'TLK-51831V1000', 'TLK-49312A92', 'TLK-49312A69', 'TLK-51391A36', 'TLK-514714706', 'TLK-514714718', 'TLK-514714705', 'TLK-514714707', 'TLK-51511A37', 'TLK-51511A51', 'TLK-49641R32', 'TLK-49641V1015', 'TLK-49641A22', 'TLK-49641V2600', 'TLK-50551A5', 'TLK-50551A8', 'TLK-52261A32', 'TLK-52812A26', 'TLK-55711A502', 'TLK-55711A505', 'TLK-55711A14', 'TLK-54611A467', 'TLK-54611A29', 'TLK-54611A28', 'TLK-54611A26', 'TLK-54611A59', 'TLK-54611A674', 'TLK-54611A605', 'TLK-55721A18', 'TLK-55721A14', 'TLK-54641A1', 'TLK-54641A11', 'TLK-54641A602', 'TLK-54721A19', 'TLK-54721A15', 'TLK-54721A29', 'TLK-54727A11', 'TLK-54727A2', 'TLK-54721A605', 'TLK-54731A608', 'TLK-54721A35', 'TLK-54721A31', 'TLK-54721R3', 'TLK-54761A1', 'TLK-54761A8', 'TLK-54311A7', 'TLK-55312A87', 'TLK-55318A6', 'TLK-55322A6', 'TLK-55322A9', 'TLK-55331A14', 'TLK-55341A11', 'TLK-55341A1', 'TLK-55341A5', 'TLK-55341A8', 'TLK-55341A15', 'TLK-55341A29', 'TLK-55341A523', 'TLK-58611A16', 'TLK-53464A12', 'TLK-53462A2', 'TLK-53462A3', 'TLK-53462A12', 'TLK-53464A10', 'TLK-53464A15', 'TLK-53462R507', 'TLK-53464A3', 'TLK-53464A9', 'TLK-53711A16', 'TLK-53133A534', 'TLK-53133A35', 'TLK-53133A46', 'TLK-53133A657', 'TLK-53133A603', 'TLK-53133A73', 'TLK-53133A68', 'TLK-53133A546', 'TLK-53133A82', 'TLK-53133A81', 'TLK-53133A8', 'TLK-53133A83', 'TLK-53133A89', 'TLK-5314A659', 'TLK-5314A664', 'TLK-5314A26', 'TLK-5314A663', 'TLK-5314A615', 'TLK-53150A46', 'TLK-53150A51', 'TLK-53150A52', 'TLK-53150A53', 'TLK-53150A70', 'TLK-53150A69', 'TLK-53150A623', 'TLK-53150A651', 'TLK-53150A76', 'TLK-53151A528', 'TLK-54211A13', 'TLK-54211A27', 'TLK-54211A3', 'TLK-54221A30', 'TLK-54221A59', 'TLK-54221A9', 'TLK-54221A17', 'TLK-54221A27', 'TLK-54019A14', 'TLK-54019A24', 'TLK-54019A610', 'TLK-54021A9', 'TLK-54021A26', 'TLK-54021A8', 'TLK-54057A27', 'TLK-54071A9', 'TLK-54071A44', 'TLK-54071A40', 'TLK-54074A22', 'TLK-54071A34', 'TLK-54071A609', 'TLK-54074A2', 'TLK-54074A20', 'TLK-54074A24', 'TLK-54074A10', 'TLK-54071A47', 'TLK-54071A49', 'TLK-54074A23', 'TLK-54071A26', 'TLK-54071A1111', 'TLK-54071A31', 'TLK-54074A32', 'TLK-54074A605', 'TLK-54076A607', 'TLK-54074A6', 'TLK-54076A10', 'TLK-54076A604', 'TLK-54076A3', 'TLK-54076A22', 'TLK-54076A21', 'TLK-54076A4', 'TLK-54076A7', 'TLK-53222A529', 'TLK-53228A7', 'TLK-53312A532', 'TLK-53317A4', 'TLK-53317A36', 'TLK-5317A42', 'TLK-5317A44', 'TLK-5317A46', 'TLK-5317A73', 'TLK-5317A79', 'TLK-5317A80', 'TLK-5317A76', 'TLK-5317A81', 'TLK-5317A676', 'TLK-5317A682', 'TLK-5317A67', 'TLK-5317A85', 'TLK-5317A86', 'TLK-5317A75', 'TLK-5317R37', 'TLK-5317A83', 'TLK-5317A52', 'TLK-5317A516', 'TLK-5317A64', 'TLK-5317A61', 'TLK-5317A65', 'TLK-5317A66', 'TLK-53180A46', 'TLK-53180A38', 'TLK-53180A24', 'TLK-53180A36', 'TLK-53180A45', 'TLK-53180A40', 'TLK-53180A504', 'TLK-53180A9', 'TLK-53180A8', 'TLK-53187A529', 'TLK-53187A24', 'TLK-53212A505', 'TLK-53222A11', 'TLK-53222A18', 'TLK-53711A82', 'TLK-53711A90', 'TLK-53711A89', 'TLK-53711A45', 'TLK-53711A49', 'TLK-53711A53', 'TLK-53711A76', 'TLK-53717A32', 'TLK-53812A11', 'TLK-57231A9', 'TLK-57231A54', 'TLK-58411A3', 'TLK-58411A12', 'TLK-59211A605', 'TLK-59211A41', 'TLK-59211A5', 'TLK-59211A4', 'TLK-59211A80', 'TLK-59213R685', 'TLK-57211A505', 'TLK-57211A5']
// TODO: Make sure to only include the cubes that have a current order, that will have an orderKey
require('./run')(async () => {
  const Control = Parse.Object.extend('Control')
  const TaskList = Parse.Object.extend('TaskList')

  const control = await $getOrFail(Control, controlId)
  if (control.get('status')) {
    throw new Error('This control was already planned. You may sync the lists instead to remove cubes that are freed')
  }
  const { date, dueDate } = control.attributes

  const cubes = await $query('Cube')
    .containedIn('objectId', cubeIds)
    .select(['objectId', 'ort', 'state', 'caok'])
    .limit(cubeIds.length)
    .find({ useMasterKey: true })
  const cubeOrderKeys = cubes.reduce((acc, cube) => ({ ...acc, [cube.id]: cube.get('caok') }), {})
  const locations = {}
  for (const cube of cubes) {
    const stateId = cube.get('state')?.id
    const ort = cube.get('ort')
    const placeKey = [stateId, ort].join(':')
    if (!locations[placeKey]) {
      locations[placeKey] = []
    }
    locations[placeKey].push(cube.id)
  }
  for (const placeKey of Object.keys(locations)) {
    const [stateId, ort] = placeKey.split(':')
    const state = await $getOrFail('State', stateId)
    let taskList = await $query('TaskList')
      .equalTo('control', control)
      .equalTo('state', state)
      .equalTo('ort', ort)
      .first({ useMasterKey: true })
    if (!taskList) {
      taskList = new TaskList({
        type: 'control',
        control,
        state,
        ort,
        date,
        dueDate,
        cubeIds: locations[placeKey]
      })
      const audit = { fn: 'task-list-generate' }
      await taskList.save(null, { useMasterKey: true, context: { audit } })
      continue
    }
    const cubeIds = locations[placeKey]
    const changes = $changes(taskList, { date, dueDate })
    const cubeChanges = $cubeChanges(taskList, cubeIds)

    if ($cleanDict(changes) || cubeChanges) {
      taskList.set({ date, dueDate, cubeIds })
      const audit = { fn: 'task-list-update', data: { changes, cubeChanges } }
      await taskList.save(null, { useMasterKey: true, context: { audit } })
    }
  }

  // remove placeKeys not in list
  await $query('TaskList')
    .equalTo('control', control)
    .notContainedIn('pk', Object.keys(locations))
    .each(dl => dl.destroy({ useMasterKey: true }), { useMasterKey: true })

  await control.set('cubeIds', cubeIds).set('cubeOrderKeys', cubeOrderKeys).save(null, { useMasterKey: true })
  console.log(`${Object.keys(locations).length} lists generated`)
})
