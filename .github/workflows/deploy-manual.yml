name: Deploy to production

on:
  workflow_dispatch:

env:
  REGISTRY_IMAGE: mammuthosting/rheinkultur-wawi
  NAMESPACE: rheinkultur-wawi
  RELEASE_NAME: rheinkultur-wawi
  HELM_CHART: mammut-helm/rheinkultur-wawi

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          # - linux/arm64/v8
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare
        id: prep
        run: |
          NODE_VERSION=$(cat .nvmrc | tr -cd [:digit:].)
          echo "node_version=${NODE_VERSION}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=sha,ref=short

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_VERSION=${{ steps.prep.outputs.node_version }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=sha,ref=short

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  create-secrets:
    name: Create secrets
    runs-on: ubuntu-latest
    concurrency: secrets
    steps:
      - name: Generate secrets
        run: |
          mkdir ./secrets
          echo "$ENVFILE" > ./secrets/env
          echo "$GOOGLEKEY" > ./secrets/googlekey
        env:
          ENVFILE: ${{ secrets.ENV }}
          GOOGLEKEY: ${{ secrets.GOOGLEKEY }}

      - name: Generate kubeconfig
        run: |
          mkdir $HOME/.kube
          echo "$KUBECONFIG" > $HOME/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Install kubectl
        uses: azure/setup-kubectl@901a10e89ea615cf61f57ac05cecdf23e7de06d8 # v3

      - name: Use context
        run: kubectl config use-context rk0

      - name: Ensure namespace exits
        run: kubectl get namespace | grep -q "^${{ env.NAMESPACE }}" || kubectl create namespace ${{ env.NAMESPACE }}

      - name: Recreate secrets
        run: |
          kubectl delete secret ${{ env.RELEASE_NAME }}-env -n ${{ env.NAMESPACE }} --ignore-not-found
          kubectl create secret generic ${{ env.RELEASE_NAME }}-env --from-env-file=./secrets/env -n ${{ env.NAMESPACE }}
          kubectl delete secret ${{ env.RELEASE_NAME }}-googlekey -n ${{ env.NAMESPACE }} --ignore-not-found
          kubectl create secret generic ${{ env.RELEASE_NAME }}-googlekey --from-file=./secrets/googlekey -n ${{ env.NAMESPACE }}

  deploy:
    needs: [build, merge, create-secrets]
    runs-on: ubuntu-latest
    concurrency: deploy
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=sha,ref=short

      - name: Generate kubeconfig
        run: |
          mkdir $HOME/.kube
          echo "$KUBECONFIG" > $HOME/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Install kubectl
        uses: azure/setup-kubectl@901a10e89ea615cf61f57ac05cecdf23e7de06d8 # v3

      - name: Use context
        run: kubectl config use-context rk0

      - name: Install Helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3

      - name: Add helm repo
        run: |
          helm repo add mammut-helm https://mammutmedia.github.io/helm-charts/
          helm repo update

      - name: Deploy ${{ env.RELEASE_NAME }}
        run: helm upgrade -f ./.github/values.yaml ${{ env.RELEASE_NAME }} ${{ env.HELM_CHART }} -n ${{ env.NAMESPACE }} --set image.tag="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}" --create-namespace --install --atomic --wait --timeout=5m0s

  notification:
    runs-on: ubuntu-latest
    name: Notify PagerDuty
    needs: [deploy]
    if: always()
    steps:
      # make deploy job status available
      # see https://github.com/marketplace/actions/workflow-status-action
      - uses: martialonline/workflow-status@v3
        id: check
      - name: Create a change event
        uses: PagerDuty/pagerduty-change-events-action@master
        with:
          integration-key: ${{ secrets.PAGERDUTY_CHANGE_INTEGRATION_KEY }}
          custom-event: Manual deployment ${{ steps.check.outputs.status }}
